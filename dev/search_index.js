var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DrMZ","category":"page"},{"location":"#DrMZ","page":"Home","title":"DrMZ","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DrMZ]","category":"page"},{"location":"#DrMZ.advection_diffusion_pde!-NTuple{4,Any}","page":"Home","title":"DrMZ.advection_diffusion_pde!","text":"advection_diffusion_pde!(duhat,uhat,p,t)\n\nRHS for the advection-diffusion equation u_t = - u_x + ν u_xx for numerical integration in Fourier space where ν is the viscosity.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.advection_pde!-NTuple{4,Any}","page":"Home","title":"DrMZ.advection_pde!","text":"advection_pde!(duhat,uhat,p,t)\n\nRHS for the advection equation u_t = - u_x for numerical integration in Fourier space.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.average_error-Tuple{Any,Any}","page":"Home","title":"DrMZ.average_error","text":"average_error(domain,error)\n\nCompute the average error using the trapezoid rule frac1T int_0^T error(t) dt.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.average_ic_error-Tuple{Any,Any}","page":"Home","title":"DrMZ.average_ic_error","text":"average_ic_error(target,prediction)\n\nCompute the two-norm relative error between the prediction and target values for an initial condition.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.basis_derivative-Tuple{Any}","page":"Home","title":"DrMZ.basis_derivative","text":"basis_derivative(basis,nodes)\n\nCompute the derivatives of each basis function using auto differentiation.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.basis_eval-Tuple{Any,Array}","page":"Home","title":"DrMZ.basis_eval","text":"basis_eval(basis,nodes)\n\nEvaluate the basis functions for a specified spatial grid or at a specified point. Evaluation for a specified grid returns an N x M matrix with N respresenting the number of nodes and M representing the number of custom basis functions. Evalaution for a specified point returns a 1 x M vector.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.basis_interpolate-NTuple{4,Any}","page":"Home","title":"DrMZ.basis_interpolate","text":"basis_interpolate(coeffs,x,L1,L2)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.bsplines_eval-Tuple{Float64,Any,Any,Any,Any}","page":"Home","title":"DrMZ.bsplines_eval","text":"bsplines_eval(x,basis,p,n,b)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.bsplines_interpolate_periodic-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.bsplines_interpolate_periodic","text":"bsplines_interpolate_periodic(x,y,p)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.build_basis-NTuple{7,Any}","page":"Home","title":"DrMZ.build_basis","text":"build_basis(trunk,L1,L2,M,nodes,weights,L;cutoff=1e-13,tol=1e-12)\n\nGenerate a dictionary of orthonormal custom basis functions based on a specified quadrature rule. An orthogonal polynomial expansion is utilized for the evaluation at points away from the specified quadrature nodes.     \n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.build_basis_expand-NTuple{6,Any}","page":"Home","title":"DrMZ.build_basis_expand","text":"build_basis_expand(trunk,L1,L2,M,nodes,weights;cutoff=1e-13,tol=1e-12)\n\nGenerate a dictionary of periodic, orthonormal custom basis functions based on the trapezoid rule. B-splines are utilized for the evaluation at points away from the specified quadrature nodes.     \n\nTo Do: Add time-sampling capabilities...\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.build_dense_model-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.build_dense_model","text":"function build_dense_model(number_layers,neurons,activations)\n\nBuild a feedforward neural network (FFNN) consisting of number_layers of Flux dense layers for the specified number of neurons and activations.\n\nExamples\n\njulia> build_dense_model(2,[(128,128),(128,128)],[relu,relu])\nChain(Dense(128, 128, NNlib.relu), Dense(128, 128, NNlib.relu))\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.burgers_flux-Tuple{Any,Any}","page":"Home","title":"DrMZ.burgers_flux","text":"burgers_flux(u_right,u_left)\n\nNumerical flux for Burgers nonlinearity, f(u) = frac12u^2, for use with discontinuous Galerkin method.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.central_difference-NTuple{4,Any}","page":"Home","title":"DrMZ.central_difference","text":"central_difference(u_j,u_jpos,u_jneg,mu)\n\nCompute the second order central difference for the viscous term of the viscous Burgers equation u_t = - u u_x + ν u_xx. mu is equal to $ \\frac{\\nu}{\\Delta x^2}$.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.cheby_diff-NTuple{4,Any}","page":"Home","title":"DrMZ.cheby_diff","text":"cheby_diff(sol,N,L1,L2)\n\nCompute the derivative of using a Chebyshev differentiation matrix on the interval L1L2 with N discretization points.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.cheby_diff_matrix-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.cheby_diff_matrix","text":"cheby_diff_matrix(N,L1,L2)\n\nGenerate the Chebyshev differentiation matrix for the interval L1L2 with N discretization points.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.cheby_grid-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.cheby_grid","text":"cheby_grid(N,L1,L2)\n\nGenerate the grid of Chebyshev points on the interval L1L2 with N discretization points.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.clenshaw_curtis-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.clenshaw_curtis","text":"clenshaw_curtis(N,L1,L2)\n\nCompute the nodes and weights for Clenshaw-Curtis quadrature with N discretization points and on the interval L1L2.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.dbasis_interpolate-NTuple{4,Any}","page":"Home","title":"DrMZ.dbasis_interpolate","text":"dbasis_interpolate(coeffs,x,L1,L2,m)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.dlegendre_norm-NTuple{4,Any}","page":"Home","title":"DrMZ.dlegendre_norm","text":"dlegendre_norm(x,L1,L2,n)\n\nCompute the 1st derivative of the n-th shifted Legendre polynomial \n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.dlegendre_norm_basis_build-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.dlegendre_norm_basis_build","text":"dlegendre_norm_basis_build(nmax,L1,L2)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.error_rel-Tuple{Any,Any}","page":"Home","title":"DrMZ.error_rel","text":"error_rel(target,prediction)\n\nCompute the relative error between the prediction and target values.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.error_se-Tuple{Any,Any}","page":"Home","title":"DrMZ.error_se","text":"error_se(target,prediction)\n\nCompute the squared error between the prediction and target values.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.exp_kernel_periodic-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.exp_kernel_periodic","text":"function exp_kernel_periodic(fnc,x_locations;length_scale=0.5)\n\nCovariance kernel for radial basis function (GRF) and IC function for domain.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.expansion_approximation-Tuple{Array{Any,1},Any,Any}","page":"Home","title":"DrMZ.expansion_approximation","text":"expansion_approximation(basis,coefficients,nodes)\n\nCompute the expansion approximation...\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.expansion_coefficients-Tuple{Array{Any,1},Function,Any,Any}","page":"Home","title":"DrMZ.expansion_coefficients","text":"expansion_coefficients(basis,fnc,nodes,weights)\n\nCompute the expansion coefficients...     \n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.feature_expansion_set-NTuple{4,Any}","page":"Home","title":"DrMZ.feature_expansion_set","text":"feature_expansion_set(L1,L2,neurons,solution_loc)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.feature_expansion_set_x-NTuple{4,Any}","page":"Home","title":"DrMZ.feature_expansion_set_x","text":"feature_expansion_set_x(L1,L2,neurons,x_loc)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.feature_expansion_single-NTuple{4,Any}","page":"Home","title":"DrMZ.feature_expansion_single","text":"feature_expansion_single(L1,L2,neurons,x)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.fft_norm-Tuple{Any}","page":"Home","title":"DrMZ.fft_norm","text":"fft_norm(solution)\n\nCompute the FFT normalized by frac1N.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.fl-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.fl","text":"fl(ulv,urv,ubv)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.fourier_diff-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.fourier_diff","text":"fourier_diff(sol,N,dL;format=\"matrix\")\n\nCompute the derivative using a Fourier differentiation matrix (default) or the spectral derivative for periodic functions for domain length dL and with N discretization points.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.gauss_legendre-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.gauss_legendre","text":"gauss_legendre(N,L1,L2)\n\nCompute the nodes and weights for Gauss-Legendre quadrature with N discretization points and on the interval L1L2.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_basis_solution-NTuple{7,Any}","page":"Home","title":"DrMZ.generate_basis_solution","text":"generate_basis_solution(nodes,weights,tspan,initial_condition,basis,params,pde_function;dt=1e-3,rtol=1e-10,atol=1e-14,peak=1.05)\n\nGenerate the solution for a given pde_function and initial_condition on a periodic domain using a custom basis function expansion and a RK45 solver.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_basis_solution_esdirk-NTuple{7,Any}","page":"Home","title":"DrMZ.generate_basis_solution_esdirk","text":"generate_basis_solution_esdirk(nodes,weights,tspan,initial_condition,basis,params,pde_function;dt=1e-4,rtol=1e-8,atol=1e-12)\n\nGenerate the solution for a given pde_function and initial_condition on a periodic domain using a custom basis function expansion and a ESDIRK4 solver.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_basis_solution_implicit-NTuple{7,Any}","page":"Home","title":"DrMZ.generate_basis_solution_implicit","text":"generate_basis_solution_implicit(nodes,weights,tspan,initial_condition,basis,params,pde_function;dt=1e-3,rtol=1e-8,atol=1e-12)\n\nGenerate the solution for a given pde_function and initial_condition on a periodic domain using a custom basis function expansion and a Crank-Nicolson solver.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_fourier_solution-NTuple{6,Any}","page":"Home","title":"DrMZ.generate_fourier_solution","text":"generate_fourier_solution(L1,L2,tspan,N,initial_condition,pde_function;dt=1e-3,nu=0.1,rtol=1e-10,atol=1e-14)\n\nGenerate the solution for a given pde_function and initial_condition on a periodic domain using a N mode Fourier expansion and a RK45 solver.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_fourier_solution_esdirk-NTuple{6,Any}","page":"Home","title":"DrMZ.generate_fourier_solution_esdirk","text":"generate_fourier_solution_esdirk(L1,L2,tspan,N,initial_condition,pde_function;dt=1e-4,rtol=1e-8,atol=1e-12,nu=0.1)\n\nGenerate the solution for a given pde_function and initial_condition on a periodic domain using a N mode Fourier expansion and a ESDIRK4 solver.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_fourier_solution_implicit-NTuple{6,Any}","page":"Home","title":"DrMZ.generate_fourier_solution_implicit","text":"generate_fourier_solution_implicit(L1,L2,tspan,N,initial_condition,pde_function_explicit,pde_function_implicit;dt=1e-4,rtol=1e-8,atol=1e-12,nu=0.1)\n\nGenerate the solution for a given pde_function and initial_condition on a periodic domain using a N mode Fourier expansion and a Crank-Nicolson solver.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_muscl_minmod_solution-NTuple{6,Any}","page":"Home","title":"DrMZ.generate_muscl_minmod_solution","text":"generate_muscl_minmod_solution(L1,L2,t_end,N,u0,pde_function_handle;dt=1e-4,kappa=-1)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_periodic_functions-NTuple{4,Any}","page":"Home","title":"DrMZ.generate_periodic_functions","text":"generate_periodic_functions(fnc,x_locations,number_functions,length_scale)\n\nGenerate a specified number_functions of random periodic vectors using the exp_kernel_periodic function and a multivariate distribution.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_periodic_train_test-NTuple{6,Any}","page":"Home","title":"DrMZ.generate_periodic_train_test","text":"generate_periodic_train_test(t_span,number_sensors,number_train_functions,number_test_functions,number_solution_points,pde_function_handle;L1=0,L2=2*pi,length_scale=0.5,batch=number_solution_points,dt=1e-3,nu_val=0.1,fnc=(x)->sin(x/2)^2)\n\nGenerate the training and testing data for a specified pde_function_handle for periodic boundary conditions using a Fourier spectral method. Defaults to IC f(sin^2(x2)) and x  01.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_periodic_train_test_esdirk-NTuple{6,Any}","page":"Home","title":"DrMZ.generate_periodic_train_test_esdirk","text":"generate_periodic_train_test_esdirk(t_span,number_sensors,number_train_functions,number_test_functions,number_solution_points,pde_function_handle;L1=0,L2=2*pi,length_scale=0.5,batch=number_solution_points,dt_size=1e-4,nu_val=0.1,domain=\"periodic\",fnc=(x)->sin(x/2)^2,mode_multiplier=4)\n\nGenerate the training and testing data for a specified pde_function_handle for periodic boundary conditions using a Fourier spectral method and a ESDIRK ODE solver. Defaults to IC f(sin^2(x2)) and x  01.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_periodic_train_test_implicit-NTuple{6,Any}","page":"Home","title":"DrMZ.generate_periodic_train_test_implicit","text":"generate_periodic_train_test_implicit(t_span,number_sensors,number_train_functions,number_test_functions,number_solution_points,pde_function_handle;L1=0,L2=2*pi,length_scale=0.5,batch=number_solution_points,dt_size=1e-4,nu_val=0.1,domain=\"periodic\",fnc=(x)->sin(x/2)^2,mode_multiplier=4)\n\nGenerate the training and testing data for a specified pde_function_handle for periodic boundary conditions using a Fourier spectral method and a Crank-Nicolson solver. Defaults to IC f(sin^2(x2)) and x  01.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_periodic_train_test_initial_conditions-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.generate_periodic_train_test_initial_conditions","text":"generate_periodic_train_test_initial_conditions(t_span,number_sensors,number_test_functions,number_train_functions,number_solution_points,pde_function_handle;L1=0,L2=2*pi,length_scale=0.5,batch=number_solution_points,dt=1e-3,nu_val=0.1,domain=\"periodic\",fnc=(x)->sin(x/2)^2)\n\nGenerate the training and testing data for a specified pde_function_handle for periodic boundary conditions using a Fourier spectral method. Defaults to IC f(sin^2(x2)) and x  01.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_periodic_train_test_muscl-NTuple{6,Any}","page":"Home","title":"DrMZ.generate_periodic_train_test_muscl","text":"generate_periodic_train_test_muscl(t_span,number_sensors,number_test_functions,number_train_functions,number_solution_points,pde_function_handle;L1=0,L2=2*pi,length_scale=0.5,batch=number_solution_points,dt_size=1e-4,upwind_solution_points=4096,fnc=(x)->sin(x/2)^2)\n\nGenerate the training and testing data for a specified pde_function_handle for periodic boundary conditions using a MUSCL method. Defaults to IC f(sin^2(x2)) and x  01.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.generate_sinusoidal_functions_2_parameter-Tuple{Any,Any}","page":"Home","title":"DrMZ.generate_sinusoidal_functions_2_parameter","text":"generate_sinusoidal_functions_2_parameter(x_locations,number_functions)\n\nGenerate a specified number_functions of random periodic vectors for the distribution α sin(x)+β for α  -11 and β  -11.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.get_1D_energy_custom-NTuple{4,Any}","page":"Home","title":"DrMZ.get_1D_energy_custom","text":"get_1D_energy_custom(basis,u_solution,L1,L2,weights;multiplier=1/(4*pi))\n\nCompute the energy in the custom basis domain: $ \\frac{1}{2} \\sum \\vert \\a_k \\vert^2 $. Multiplier defaults to $ \\frac{1}{4\\pi} $ to match the Fourier calculation.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.get_1D_energy_custom_coefficients-Tuple{Any}","page":"Home","title":"DrMZ.get_1D_energy_custom_coefficients","text":"get_1D_energy_custom_coefficients(u_coefficients;zeta=1/(4*pi))\n\nCompute the energy in the custom basis domain: $ \\zeta \\sum \\vert \\a_k \\vert^2 $. $ \\zeta $ defaults to $ \\frac{1}{4\\pi} $ to match the Fourier calculation.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.get_1D_energy_fft-Tuple{Any}","page":"Home","title":"DrMZ.get_1D_energy_fft","text":"get_1D_energy_fft(u_solution)\n\nCompute the energy in the Fourier domain using the scaling of $ \\frac{1}{N} $. Note: this does not include the 2π multiplier found in Parseval's identity for Fourier series and computes $ \\frac{1}{2} \\sum \\vert \\hat{u}_k \\vert^2 $.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.get_1D_energy_upwind-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.get_1D_energy_upwind","text":"get_1D_energy_upwind(u_solution_full,u_solution,N)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.ic_error-Tuple{Any,Any}","page":"Home","title":"DrMZ.ic_error","text":"ic_error(target,prediction)\n\nCompute the relative error between the prediction and target values for an initial condition. If the target = 0, the target in denomenator is augmented by epsilon_machine.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.ifft_norm-Tuple{Any}","page":"Home","title":"DrMZ.ifft_norm","text":"ifft_norm(solution)\n\nCompute the IFFT normalized by N.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.inviscid_burgers_pde!-NTuple{4,Any}","page":"Home","title":"DrMZ.inviscid_burgers_pde!","text":"inviscid_burgers_pde!(duhat,uhat,p,t)\n\nRHS for the inviscid Burgers equation u_t = - u u_x for numerical integration in Fourier space.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.kdv_explicit_pde!-NTuple{4,Any}","page":"Home","title":"DrMZ.kdv_explicit_pde!","text":"kdv_explicit_pde!(duhat,uhat,p,t)\n\nExplicit portion of the RHS for the Korteweg-de Vries equation u_t = - u u_x - nu^2 u_xxx for numerical integration numerical integration in Fourier space.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.kdv_implicit_pde!-NTuple{4,Any}","page":"Home","title":"DrMZ.kdv_implicit_pde!","text":"kdv_implicit_pde!(duhat,uhat,p,t)\n\nImplicit portion of the RHS for the Korteweg-de Vries equation u_t = - u u_x - nu^2 u_xxx for numerical integration numerical integration in Fourier space.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.kdv_pde!-NTuple{4,Any}","page":"Home","title":"DrMZ.kdv_pde!","text":"kdv_pde!(duhat,uhat,p,t)\n\nRHS for the Korteweg-de Vries equation u_t = - u u_x - nu^2 u_xxx for numerical integration numerical integration in Fourier space.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.ks_explicit_pde!-NTuple{4,Any}","page":"Home","title":"DrMZ.ks_explicit_pde!","text":"ks_explicit_pde!(duhat,uhat,p,t)\n\nExplicit portion of the RHS for the Kuramoto-Sivashinsky equation u_t = - u u_x -u_xx - nu u_xxxx for numerical integration numerical integration in Fourier space.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.ks_implicit_pde!-NTuple{4,Any}","page":"Home","title":"DrMZ.ks_implicit_pde!","text":"ks_implicit_pde!(duhat,uhat,p,t)\n\nImplicit portion of the RHS for the Kuramoto-Sivashinsky equation u_t = - u u_x -u_xx - nu u_xxxx for numerical integration numerical integration in Fourier space.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.ks_pde!-NTuple{4,Any}","page":"Home","title":"DrMZ.ks_pde!","text":"ks_pde!(duhat,uhat,p,t)\n\nRHS for the Kuramoto-Sivashinsky equation u_t = - u u_x -u_xx - nu u_xxxx for numerical integration numerical integration in Fourier space.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.legendre_norm-NTuple{4,Any}","page":"Home","title":"DrMZ.legendre_norm","text":"legendre_norm(x,L1,L2,n)\n\nCompute the n-th orthonormal, shifted Legendre polynomial\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.legendre_norm_basis_build-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.legendre_norm_basis_build","text":"legendre_norm_basis_build(nmax,L1,L2)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.linear_reg-Tuple{Any,Any}","page":"Home","title":"DrMZ.linear_reg","text":"linear_reg(x,y)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.load_basis-Tuple{Any,Any}","page":"Home","title":"DrMZ.load_basis","text":"load_basis(basis,M,pde_function)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.load_branch-Tuple{Any,Any}","page":"Home","title":"DrMZ.load_branch","text":"load_branch(n_epoch,pde_function)\n\nLoad the trained branch neural networks.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.load_data-NTuple{4,Any}","page":"Home","title":"DrMZ.load_data","text":"load_data(n_epoch,number_train_functions,number_test_functions,pde_function)\n\nLoad the trained branch and trunk neural networks along with the train_data and test_data.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.load_data_initial_conditions-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.load_data_initial_conditions","text":"load_data_initial_conditions(number_train_functions,number_test_functions,pde_function)\n\nLoad the initial conditions from the train_data and test_data.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.load_data_train_test-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.load_data_train_test","text":"load_data_train_test(number_train_functions,number_test_functions,pde_function)\n\nLoad the train_data and test_data.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.load_model-Tuple{Any,Any}","page":"Home","title":"DrMZ.load_model","text":"load_model(n_epoch,pde_function)\n\nLoad the trained branch and trunk neural networks.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.load_trunk-Tuple{Any,Any}","page":"Home","title":"DrMZ.load_trunk","text":"load_trunk(n_epoch,pde_function)\n\nLoad the trained trunk neural networks.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.loss_all-NTuple{5,Any}","page":"Home","title":"DrMZ.loss_all","text":"loss_all(branch,trunk,initial_conditon,solution_location,target_value)\n\nCompute the mean squared error (MSE) for a complete dataset.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.minmod-Tuple{Any,Any}","page":"Home","title":"DrMZ.minmod","text":"minmod(x,y)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.mode_extractor-Tuple{Any,Any}","page":"Home","title":"DrMZ.mode_extractor","text":"mode_extractor(uhat,N)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.mse_error-Tuple{Any,Any}","page":"Home","title":"DrMZ.mse_error","text":"mse_error(target,prediction)\n\nCompute the mean squared error between the prediction and target values.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.muscl_minmod_RHS!-NTuple{4,Any}","page":"Home","title":"DrMZ.muscl_minmod_RHS!","text":"muscl_minmod_RHS!(du,u,p,t)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.muscl_minmod_viscous_RHS!-NTuple{4,Any}","page":"Home","title":"DrMZ.muscl_minmod_viscous_RHS!","text":"muscl_minmod_viscous_RHS!(du,u,p,t)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.norm_infinity_error-Tuple{Any,Any}","page":"Home","title":"DrMZ.norm_infinity_error","text":"norm_infinity_error(target,prediction)\n\nCompute the two-norm relative error between the prediction and target values.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.norm_rel_error-Tuple{Any,Any}","page":"Home","title":"DrMZ.norm_rel_error","text":"norm_rel_error(target,prediction)\n\nCompute the Euclidean two-norm relative error between the prediction and target values.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.norm_rel_error_continuous-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.norm_rel_error_continuous","text":"function norm_rel_error_continuous(target,prediction,weights)\n\nCompute the continuous two-norm relative error between the prediction and target values.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.orthonormal_check-Tuple{Any,Any}","page":"Home","title":"DrMZ.orthonormal_check","text":"orthonormal_check(basis,weights;tol = 1e-12)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.periodic_fill_domain-Tuple{Any}","page":"Home","title":"DrMZ.periodic_fill_domain","text":"periodic_fill_domain(x_locations)\n\nOutput the full domain from periodic domain specified for x_locations.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.periodic_fill_solution-Tuple{Any}","page":"Home","title":"DrMZ.periodic_fill_solution","text":"periodic_fill_solution(solution)\n\nOutput the full u(tx) solution from periodic solution.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.predict-NTuple{5,Any}","page":"Home","title":"DrMZ.predict","text":"predict(branch,trunk,initial_condition,x_locations,t_values)\n\nPredict solution u(tx) at specified output locations using trained operator neural network branch and trunk.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.quadratic_nonlinear-NTuple{4,Any}","page":"Home","title":"DrMZ.quadratic_nonlinear","text":"quadratic_nonlinear!(uhat,N,dL,alpha)\n\nCompute the convolution sum fracik2sum_p+q=k u_p u_q resulting from the quadratic nonlinearity of Burgers equation u u_x in Fourier space. Convolution sum is padded with the 3/2 rule for dealiasing.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.quadratic_nonlinear_basis-Tuple{Any,Any}","page":"Home","title":"DrMZ.quadratic_nonlinear_basis","text":"quadratic_nonlinear_basis(u,nonlinear_triple)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.quadratic_nonlinear_triple_product_basis-NTuple{4,Any}","page":"Home","title":"DrMZ.quadratic_nonlinear_triple_product_basis","text":"quadratic_nonlinear_triple_product_basis(basis_nodes,Dbasis_nodes,nodes,weights)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.quadratic_nonlinear_triple_product_basis_galerkin-NTuple{4,Any}","page":"Home","title":"DrMZ.quadratic_nonlinear_triple_product_basis_galerkin","text":"quadratic_nonlinear_triple_product_basis_galerkin(basis_nodes,Dbasis_nodes,nodes,weights)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.reduced_initial_condition-NTuple{5,Any}","page":"Home","title":"DrMZ.reduced_initial_condition","text":"reduced_initial_condition(L1,L2,x_reduced,x_locations,initial_condition)\n\nExtract the x locations and intial condition values u(x) at a reduced number of equally spaced spatial locations.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_advection!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_advection!","text":"rhs_advection!(du,u,p,t)\n\nRHS for the advection equation u_t = - u_x for numerical integration in custom basis space using discontinuous Galerkin method.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_advection_diffusion!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_advection_diffusion!","text":"rhs_advection_diffusion!(du,u,p,t)\n\nRHS for the advection-diffusion equation u_t = - u_x + ν u_xx for numerical integration in custom basis space using discontinuous Galerkin method and where ν is the viscosity.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_advection_diffusion_dirichlet!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_advection_diffusion_dirichlet!","text":"rhs_advection_diffusion_dirichlet!(du,u,p,t)\n\nRHS for the advection-diffusion equation u_t = - u_x + ν u_xx with Dirichlet boundary conditions for numerical integration in custom basis space using discontinuous Galerkin method and where ν is the viscosity.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_advection_diffusion_galerkin!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_advection_diffusion_galerkin!","text":"rhs_advection_diffusion_galerkin!(du,u,p,t)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_advection_galerkin!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_advection_galerkin!","text":"rhs_advection_galerkin!(du,u,p,t)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_explicit_kdv!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_explicit_kdv!","text":"rhs_explicit_kdv!(du,u,p,t)\n\nExplicit portion of the RHS for the Korteweg-de Vries equation u_t = - u u_x - nu^2 u_xxx for numerical integration in custom basis space using discontinuous Galerkin method.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_explicit_ks!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_explicit_ks!","text":"rhs_explicit_ks!(du,u,p,t)\n\nExplicit portion of the RHS for the Kuramoto-Sivashinsky equation u_t = - u u_x -u_xx - nu u_xxxx for numerical integration in custom basis space using discontinuous Galerkin method.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_implicit_kdv!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_implicit_kdv!","text":"rhs_implicit_kdv!(du,u,p,t)\n\nImplicit portion of the RHS for the Korteweg-de Vries equation u_t = - u u_x - nu^2 u_xxx for numerical integration in custom basis space using discontinuous Galerkin method.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_implicit_ks!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_implicit_ks!","text":"rhs_implicit_ks!(du,u,p,t)\n\nImplicit portion of the RHS for the Kuramoto-Sivashinsky equation u_t = - u u_x -u_xx - nu u_xxxx for numerical integration in custom basis space using discontinuous Galerkin method.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_inviscid_burgers!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_inviscid_burgers!","text":"rhs_inviscid_burgers!(du,u,p,t)\n\nRHS for the inviscid Burgers equation u_t = - u u_x for numerical integration in custom basis space using discontinuous Galerkin method.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_inviscid_burgers_galerkin!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_inviscid_burgers_galerkin!","text":"rhs_inviscid_burgers_galerkin!(du,u,p,t)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_inviscid_burgers_pseudo!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_inviscid_burgers_pseudo!","text":"rhs_inviscid_burgers_pseudo!(du,u,p,t)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_kdv!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_kdv!","text":"rhs_kdv!(du,u,p,t)\n\nRHS for the Korteweg-de Vries equation u_t = - u u_x - nu^2 u_xxx for numerical integration in custom basis space using discontinuous Galerkin method.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_kdv_galerkin!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_kdv_galerkin!","text":"rhs_kdv_galerkin!(du,u,p,t)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_kdv_pseudo!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_kdv_pseudo!","text":"rhs_kdv_pseudo!(du,u,p,t)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_ks!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_ks!","text":"rhs_ks!(du,u,p,t)\n\nRHS for the Kuramoto-Sivashinsky equation u_t = - u u_x -u_xx - nu u_xxxx for numerical integration in custom basis space using discontinuous Galerkin method.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_ks_galerkin!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_ks_galerkin!","text":"rhs_ks_galerkin!(du,u,p,t)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_ks_pseudo!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_ks_pseudo!","text":"rhs_ks_pseudo!(du,u,p,t)\n\nNo padding to account for the impact of potential aliasing \n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_viscous_burgers!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_viscous_burgers!","text":"rhs_viscous_burgers!(du,u,p,t)\n\nRHS for the viscous Burgers equation u_t = - u u_x + ν u_xx for numerical integration in custom basis space using Discontinuous Galerking method and where ν is the viscosity.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_viscous_burgers_galerkin!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_viscous_burgers_galerkin!","text":"rhs_viscous_burgers_galerkin!(du,u,p,t)\n\nTo Do: Simplify input parameters - typical all Galerkin RHS's\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.rhs_viscous_burgers_pseudo!-NTuple{4,Any}","page":"Home","title":"DrMZ.rhs_viscous_burgers_pseudo!","text":"rhs_viscous_burgers_pseudo!(du,u,p,t)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.save_basis-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.save_basis","text":"save_basis(basis,M,pde_function)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.save_data-NTuple{6,Any}","page":"Home","title":"DrMZ.save_data","text":"save_data(train_data,test_data,number_train_functions,number_test_functions,number_solution_points,pde_function)\n\nSave the train_data and test_data.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.save_data_initial_conditions-NTuple{5,Any}","page":"Home","title":"DrMZ.save_data_initial_conditions","text":"save_data_initial_conditions(number_train_functions,number_test_functions)\n\nSaves the initial conditions from the train_ic and test_ic.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.save_model-NTuple{4,Any}","page":"Home","title":"DrMZ.save_model","text":"save_model(branch,trunk,n_epoch,loss_all_train,loss_all_test,pde_function)\n\nSave the trained branch and trunk neural networks and the training and testing loss history.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.solution_extraction-NTuple{5,Any}","page":"Home","title":"DrMZ.solution_extraction","text":"solution_extraction(x_locations,t_values,solution,initial_condition,number_solution_points)\n\nExtract the specified number_solution_points randomly from the u(tx) solution space.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.solution_interpolation-NTuple{5,Any}","page":"Home","title":"DrMZ.solution_interpolation","text":"solution_interpolation(t_span_original,x_locations_original,t_span_interpolate,x_locations_interpolate,solution)\n\nCompute the u(tx) solution at intermediate (tx) locations using linear interpolation.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.solution_spatial_sampling-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.solution_spatial_sampling","text":"solution_spatial_sampling(x_prediction,x_target,solution)\n\nExtract the solution values u(tx) at a reduced number of equally spaced spatial locations.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.solution_temporal_sampling-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.solution_temporal_sampling","text":"solution_temporal_sampling(t_prediction,t_target,solution)\n\nExtract the solution values u(tx) at a reduced number of equally spaced temporal locations.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.spectral_approximation_fourier-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.spectral_approximation_fourier","text":"spectral_approximation_fourier(x_locations,k,coefficients)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.train_model-NTuple{6,Any}","page":"Home","title":"DrMZ.train_model","text":"train_model(branch,trunk,n_epoch,train_data;learning_rate=0.00001,save_at=2500,starting_epoch=0)\n\nTrain the operator neural network using the mean squared error (MSE) and Adam optimization for n_epochs epochs.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.trapezoid-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.trapezoid","text":"trapezoid(N,L1,L2)\n\nCompute the nodes and weights for trapezoid rule with N discretization points and on the interval 0L2. TO DO: Revise for [L1,L2] support.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.trapz-Tuple{Any,Any}","page":"Home","title":"DrMZ.trapz","text":"trapz(x_range,integrand)\n\nNumerical integration using the multi-application trapezoidal rule.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.trunk_build-Tuple{Any,Any,Any}","page":"Home","title":"DrMZ.trunk_build","text":"trunk_build(trunk,M,dtsample)\n\nGenerate a dictionary of trunk functions evaluated at t = 0 or at a range of times spanning (0:dtsample:1)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.trunk_ortho_build-NTuple{6,Any}","page":"Home","title":"DrMZ.trunk_ortho_build","text":"trunk_ortho_build(utilde,L1,L2,nodes,weights,L)\n\nGenerate a dictionary of orthonormal custom basis functions which use an orthogonal polynomial expansion for evaluation away from the specified quadrature nodes.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.trunk_ortho_build_expand-Tuple{Any,Any}","page":"Home","title":"DrMZ.trunk_ortho_build_expand","text":"trunk_ortho_build_expand(utilde,nodes;p=17)\n\nGenerate a dictionary of periodic, orthonormal custom basis functions which use B-splines for evaluation away from the specified quadrature nodes.\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.ub-Tuple{Any,Any}","page":"Home","title":"DrMZ.ub","text":"ub(ulv,urv)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.ulnl-NTuple{5,Any}","page":"Home","title":"DrMZ.ulnl","text":"ulnl(uj,ujn,ujnn,kappa,omega)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.ulpl-NTuple{5,Any}","page":"Home","title":"DrMZ.ulpl","text":"ulpl(ujp,uj,ujn,kappa,omega)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.urnl-NTuple{5,Any}","page":"Home","title":"DrMZ.urnl","text":"urnl(ujp,uj,ujn,kappa,omega)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.urpl-NTuple{5,Any}","page":"Home","title":"DrMZ.urpl","text":"urpl(ujpp,ujp,uj,kappa,omega)\n\n\n\n\n\n","category":"method"},{"location":"#DrMZ.viscous_burgers_pde!-NTuple{4,Any}","page":"Home","title":"DrMZ.viscous_burgers_pde!","text":"viscous_burgers_pde!(duhat,uhat,p,t)\n\nRHS for the viscous Burgers equation u_t = - u u_x + ν u_xx for numerical integration in Fourier space where ν is the viscosity.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
